Core classes, functions, and methods:

1. Company: A class representing a company object with attributes such as name, industry, location, and a list of legal documents associated with it.
2. LegalDocument: A class representing a legal document object with attributes such as title, content, and associated company.
3. QuizGenerator: A class responsible for generating a 10-question multiple-choice quiz based on the content of a legal document.
4. QuizEvaluator: A class responsible for evaluating user-submitted quiz answers and calculating the score.
5. User: A class representing a user object with attributes such as name, email, and a list of achievements.
6. Achievement: A class representing a user's achievement record for a specific legal document.

Entry point file (app.py):

```python
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from auth import AuthError, requires_auth
from quiz_generator import QuizGenerator
from quiz_evaluator import QuizEvaluator
from models import Company, LegalDocument, User, Achievement

app = Flask(__name__)
app.config.from_object('config')
db = SQLAlchemy(app)
CORS(app)

# API routes for company and legal document search, quiz generation, and quiz evaluation

@app.route('/companies', methods=['GET'])
def get_companies():
    # Retrieve companies from the database and return as JSON
    pass

@app.route('/legal-documents', methods=['GET'])
def get_legal_documents():
    # Retrieve legal documents from the database and return as JSON
    pass

@app.route('/quiz', methods=['POST'])
@requires_auth('generate:quiz')
def generate_quiz(payload):
    # Generate a quiz based on the content of a legal document and return as JSON
    pass

@app.route('/quiz', methods=['PUT'])
@requires_auth('evaluate:quiz')
def evaluate_quiz(payload):
    # Evaluate user-submitted quiz answers and update user achievement record in the database
    pass

# API routes for user profile management

@app.route('/users', methods=['POST'])
def create_user():
    # Create a new user in the database
    pass

@app.route('/users/<int:user_id>', methods=['GET'])
@requires_auth('get:user')
def get_user(payload, user_id):
    # Retrieve a user from the database and return as JSON
    pass

@app.route('/users/<int:user_id>', methods=['PATCH'])
@requires_auth('patch:user')
def update_user(payload, user_id):
    # Update a user in the database
    pass

# Error handling

@app.errorhandler(AuthError)
def handle_auth_error(ex):
    # Handle authentication errors
    pass

@app.errorhandler(404)
def handle_not_found_error(ex):
    # Handle 404 errors
    pass

if __name__ == '__main__':
    app.run()
```

Auth file (auth.py):

```python
from functools import wraps
from flask import request, jsonify
from jose import jwt
from urllib.request import urlopen
import json
from config import AUTH0_DOMAIN, ALGORITHMS, API_AUDIENCE

class AuthError(Exception):
    def __init__(self, error, status_code):
        self.error = error
        self.status_code = status_code

def get_token_auth_header():
    # Get the authorization header from the request and extract the JWT token
    pass

def check_permissions(permission, payload):
    # Check if the user has the required permission in the JWT token payload
    pass

def verify_decode_jwt(token):
    # Verify and decode the JWT token using the Auth0 API
    pass

def requires_auth(permission=''):
    # Decorator function to require authentication and authorization for API routes
    pass
```

Quiz generator file (quiz_generator.py):

```python
import openai
from models import LegalDocument

class QuizGenerator:
    def __init__(self, api_key):
        openai.api_key = api_key

    def generate_quiz(self, legal_document_id):
        # Generate a 10-question multiple-choice quiz based on the content of a legal document
        pass
```

Quiz evaluator file (quiz_evaluator.py):

```python
from models import Achievement

class QuizEvaluator:
    def evaluate_quiz(self, quiz_id, user_id, answers):
        # Evaluate user-submitted quiz answers and update user achievement record in the database
        pass
```

Models file (models.py):

```python
from app import db

class Company(db.Model):
    # Model representing a company object
    pass

class LegalDocument(db.Model):
    # Model representing a legal document object
    pass

class User(db.Model):
    # Model representing a user object
    pass

class Achievement(db.Model):
    # Model representing a user's achievement record for a specific legal document
    pass
```

Config file (config.py):

```python
import os

AUTH0_DOMAIN = os.environ.get('AUTH0_DOMAIN')
ALGORITHMS = os.environ.get('ALGORITHMS')
API_AUDIENCE = os.environ.get('API_AUDIENCE')

SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')
SQLALCHEMY_TRACK_MODIFICATIONS = False

OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
```